#!/bin/bash 

date
export PS4=' $SECONDS + '
set -xue

#-----------------------------------------------------------------------
# Source the variable definitions file and the bash utility functions.
#-----------------------------------------------------------------------
. $USHdir/source_util_funcs.sh
source_config_for_task "task_make_ics|task_get_extrn_ics" ${GLOBAL_VAR_DEFNS_FP}

export DATAROOT="${DATAROOT:-${DATAROOT_dfv}}"
export DATA=${DATA:-${DATAROOT}/${jobid}}

mkdir -p ${DATA}
cd ${DATA}

export cycle=${cycle:-t${cyc}z}
setpdy.sh
. ./PDY

. $USHdir/job_preamble.sh

export USHaqm=${USHaqm:-${HOMEaqm}/ush}
export EXECaqm=${EXECaqm:-${HOMEaqm}/exec}
export PARMaqm=${PARMaqm:-${HOMEaqm}/parm}
export FIXaqm=${FIXaqm:-${HOMEaqm}/fix}
export UTILaqm=${UTILaqm:-${HOMEaqm}/util}

export COMINgfs="${COMINgfs:-$(compath.py ${envir}/gfs/${gfs_ver})}"
export COMIN="${COMIN:-$(compath.py -o ${NET}/${model_ver}/${RUN}.${PDY})}"
export COMINm1="${COMINm1:-$(compath.py -o ${NET}/${model_ver}/${RUN}.${PDYm1})}"
export COMINm2="${COMINm1:-$(compath.py -o ${NET}/${model_ver}/${RUN}.${PDYm2})}"
export COMOUT="${COMOUT:-$(compath.py -o ${NET}/${model_ver}/${RUN}.${PDY}/${cyc})}"

#
#-----------------------------------------------------------------------
# Save current shell options (in a global array).  Then set new options
# for this script/function.
#-----------------------------------------------------------------------
#
{ save_shell_opts; . $USHdir/preamble.sh; } > /dev/null 2>&1
#
#-----------------------------------------------------------------------
# Get the full path to the file in which this script/function is located 
# (scrfunc_fp), the name of that file (scrfunc_fn), and the directory in
# which the file is located (scrfunc_dir).
#-----------------------------------------------------------------------
#
scrfunc_fp=$( $READLINK -f "${BASH_SOURCE[0]}" )
scrfunc_fn=$( basename "${scrfunc_fp}" )
scrfunc_dir=$( dirname "${scrfunc_fp}" )
#
#-----------------------------------------------------------------------
# Print message indicating entry into script.
#-----------------------------------------------------------------------
#
print_info_msg "
========================================================================
Entering script:  \"${scrfunc_fn}\"
In directory:     \"${scrfunc_dir}\"

This is the J-job script for the task that generates initial condition 
(IC), surface, and zeroth-hour lateral boundary condition (LBC0) files 
for the FV3 (in NetCDF format).
========================================================================"
#
#-----------------------------------------------------------------------
#
# Set the name of and create the directory in which the output from this
# script will be placed (if that directory doesn't already exist).
#
#-----------------------------------------------------------------------
#
export INPUT_DATA="${INPUT_DATA:-${COMIN}/${cyc}}"
mkdir -p ${INPUT_DATA}
#
#-----------------------------------------------------------------------
#
# Set the run directory
#
#-----------------------------------------------------------------------
#
DATA="${DATA:-${COMIN}${SLASH_ENSMEM_SUBDIR}/tmp_MAKE_ICS}"
#
#-----------------------------------------------------------------------
# Set environment only when RUN_TASK_GET_EXTRN_ICS is false.
#-----------------------------------------------------------------------
#
if [ "${RUN_TASK_GET_EXTRN_ICS}" = "FALSE" ]; then
  export TIME_OFFSET_HRS=${EXTRN_MDL_ICS_OFFSET_HRS:-0}
  export EXTRN_MDL_NAME=${EXTRN_MDL_NAME_ICS}
  GFS_FILE_FMT=${FV3GFS_FILE_FMT_ICS}
  yyyymmdd=${PDY}
  hh=${cyc}
  export EXTRN_MDL_CDATE=$( $DATE_UTIL --utc --date "${yyyymmdd} ${hh} UTC - ${TIME_OFFSET_HRS} hours" "+%Y%m%d%H" )
  export EXTRN_MDL_STAGING_DIR="${EXTRN_MDL_STAGING_DIR:-${DATA}}"
fi
#
#-----------------------------------------------------------------------
# Call the ex-script for this J-job and pass to it the necessary variables.
#-----------------------------------------------------------------------
#
$SCRIPTSdir/exaqm_make_ics.sh || \
print_err_msg_exit "\
Call to ex-script corresponding to J-job \"${scrfunc_fn}\" failed."
#
#-----------------------------------------------------------------------
# Run job postamble.
#-----------------------------------------------------------------------
#
job_postamble
#
#-----------------------------------------------------------------------
# Restore the shell options saved at the beginning of this script/function.
#-----------------------------------------------------------------------
#
{ restore_shell_opts; } > /dev/null 2>&1

