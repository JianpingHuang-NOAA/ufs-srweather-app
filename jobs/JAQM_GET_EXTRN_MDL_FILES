#!/bin/bash

date
export PS4=' $SECONDS + '
set -xue

#-----------------------------------------------------------------------
export USHaqm=${EXECaqm:-${HOMEaqm}/ush}
#
export subcyc='00'
export pid=${pid:-$$}
export outid=${outid:-"LL$job"}
#
. $USHaqm/source_util_funcs.sh
source_config_for_task "task_get_extrn_ics|task_get_extrn_lbcs" ${GLOBAL_VAR_DEFNS_FP}
#
export DATAROOT="${DATAROOT:-${DATAROOT_dfv}}"
export DATA=${DATA:-${DATAROOT}/${jobid}}

mkdir -p ${DATA}
cd ${DATA}

export cycle=${cycle:-t${cyc}z}

setpdy.sh
. ./PDY

export CDATE=${PDY}${cyc}

. $USHaqm/job_preamble.sh "TRUE"

export EXECaqm=${EXECaqm:-${HOMEaqm}/exec}
export PARMaqm=${PARMaqm:-${HOMEaqm}/parm}
export FIXaqm=${FIXaqm:-${HOMEaqm}/fix}
export UTILaqm=${UTILaqm:-${HOMEaqm}/util}

export DCOMROOT=${DCOMROOT:-/lfs/h1/ops/prod/dcom}
export COMIN="${COMIN:-$(compath.py -o ${NET}/${model_ver}/${RUN}.${PDY})}"
export COMOUT="${COMOUT:-$(compath.py -o ${NET}/${model_ver}/${RUN}.${PDY}/${cyc})}"

#
#-----------------------------------------------------------------------
#
{ save_shell_opts; . $USHaqm/preamble.sh; } > /dev/null 2>&1
#
#-----------------------------------------------------------------------
#
# Get the full path to the file in which this script/function is located 
# (scrfunc_fp), the name of that file (scrfunc_fn), and the directory in
# which the file is located (scrfunc_dir).
#
#-----------------------------------------------------------------------
#
scrfunc_fp=$( $READLINK -f "${BASH_SOURCE[0]}" )
scrfunc_fn=$( basename "${scrfunc_fp}" )
scrfunc_dir=$( dirname "${scrfunc_fp}" )
#
#-----------------------------------------------------------------------
#
# Print message indicating entry into script.
#
#-----------------------------------------------------------------------
#
print_info_msg "
========================================================================
Entering script:  \"${scrfunc_fn}\"
In directory:     \"${scrfunc_dir}\"

This is the J-job script for the task that copies or fetches external
model files from disk, HPSS, or URL, and stages them for downstream use
to generate initial or lateral boundary conditions for the FV3 model.
========================================================================"
#
#-----------------------------------------------------------------------
#
# Check whether the environment variable ICS_OR_LBCS is set to a valid
# value.  This variable specifies whether we are getting the external
# model files for the purpose of generating initial conditions (ICs) or
# lateral boundary condtions (LBCs) for the forecast model.
#
#-----------------------------------------------------------------------
#
valid_vals_ICS_OR_LBCS=( "ICS" "LBCS" )
check_var_valid_value "ICS_OR_LBCS" "valid_vals_ICS_OR_LBCS"
#
#-----------------------------------------------------------------------
#
# Set parameters for grabbing either the initial conditions from analysis or
# forecast files of external models, or the lateral boundary conditions
# from external models. This script has been called to do the work for
# one or the other.
#
#-----------------------------------------------------------------------
#
if [ "${ICS_OR_LBCS}" = "ICS" ]; then
  export TIME_OFFSET_HRS=${EXTRN_MDL_ICS_OFFSET_HRS:-0}
  export EXTRN_MDL_NAME=${EXTRN_MDL_NAME_ICS}
  GFS_FILE_FMT=${FV3GFS_FILE_FMT_ICS}
elif [ "${ICS_OR_LBCS}" = "LBCS" ]; then
  export TIME_OFFSET_HRS=${EXTRN_MDL_LBCS_OFFSET_HRS:-0}
  export EXTRN_MDL_NAME=${EXTRN_MDL_NAME_LBCS}
  GFS_FILE_FMT=${FV3GFS_FILE_FMT_LBCS}
fi

#
#-----------------------------------------------------------------------
# Set the external model start time
#-----------------------------------------------------------------------

yyyymmdd=${PDY}
hh=${cyc}
export EXTRN_MDL_CDATE=`$NDATE  -${TIME_OFFSET_HRS} $PDY$cyc`

#
function data_unavailable() {

  local name cdate end_date min_max

  name=$1
  cdate=$2
  end_date=$3
  min_max=$4

  if [ ${min_max} = max ]; then
    msg="\
Output from the specified external model (EXTRN_MDL_NAME) is not availa-
ble for the specified cycle date and time (EXTRN_MDL_CDATE) because the latter is
later than the last forecast date and time (cdate_max) with this model:
  EXTRN_MDL_NAME = \"${name}\"
  CDATE_max = \"${end_date}\"
  EXTRN_MDL_CDATE = \"${cdate}\""

  elif [ ${min_max} = min ]; then
    msg="\
Output from the specified external model (EXTRN_MDL_NAME) is not availa-
ble for the specified cycle date and time (EXTRN_MDL_CDATE) because the latter is
earlier than the implementation date of this model:
  EXTRN_MDL_NAME = \"${name}\"
  CDATE_min = \"${end_date}\"
  EXTRN_MDL_CDATE = \"${cdate}\""
  fi

  echo ${msg}
}


case ${EXTRN_MDL_NAME} in

"FV3GFS")
# The transition date from the GSMGFS to the FV3GFS was 2019061212, i.e.
# this was the first official forecast with the FV3GFS.  However, paral-
# lel runs with the FV3GFS go back to 2018121500.  So we set the first 
# EXTRN_MDL_CDATE for the FV3GFS to this date and time.
  CDATE_min="2018121500"
  CDATE_min_netcdf="2021032100"
  CDATE_max_nemsio="2021032018"
  if [ "$EXTRN_MDL_CDATE" -lt "$CDATE_min" ]; then
    print_err_msg_exit "\
      $(data_unavailable $EXTRN_MDL_NAME $EXTRN_MDL_CDATE $CDATE_min min)"
  elif [ "${GFS_FILE_FMT}" = "netcdf" ] && [ "${EXTRN_MDL_CDATE}" -lt "${CDATE_min_netcdf}" ]; then
    print_err_msg_exit "\
      NETCDF is not available for this date:: However, NEMSIO is available:: \
      $(data_unavailable $EXTRN_MDL_NAME $EXTRN_MDL_CDATE $CDATE_min_netcdf min)"
  elif [ "${GFS_FILE_FMT}" = "nemsio" ] && [ "${EXTRN_MDL_CDATE}" -gt "${CDATE_max_nemsio}" ]; then
    print_err_msg_exit "\
      NEMSIO is not available for this date:: However, NETCDF is available::  \
      $(data_unavailable $EXTRN_MDL_NAME $EXTRN_MDL_CDATE $CDATE_max_nemsio max)"
  fi
  ;;

esac
#
#-----------------------------------------------------------------------
# Create the directory where the exetrnal model files should be stored
#-----------------------------------------------------------------------
export EXTRN_MDL_STAGING_DIR="${EXTRN_MDL_STAGING_DIR:-${DATA}}"
#-----------------------------------------------------------------------
# Call the ex-script for this J-job and pass to it the necessary variables.
#-----------------------------------------------------------------------
#
$HOMEaqm/scripts/exaqm_get_extrn_mdl_files.sh 
export err=$?; err_chk
#
#======================================================================
msg="JOB ${job} HAS COMPLETED NORMALLY."
postmsg "${msg}"
#
if [ "${KEEPDATA}" = "FALSE" ]; then
   rm -rf ${DATA}
fi
#=======================================================================
print_info_msg "
#========================================================================
Exiting script:  \"${scrfunc_fn}\"
In directory:    \"${scrfunc_dir}\"
#========================================================================"
#
#-----------------------------------------------------------------------
# Restore the shell options saved at the beginning of this script/function.
#-----------------------------------------------------------------------
#
{ restore_shell_opts; } > /dev/null 2>&1

date
                  

